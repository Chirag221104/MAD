ðŸ”¬ Experiment 7: Implement Firebase Connectivity in a Flutter App
ðŸ“š Theory:
Firebase is a Backend-as-a-Service (BaaS) platform that provides developers with tools and infrastructure for building and scaling apps. One of its key features is authentication, allowing secure login methods such as Email-Password. Flutter integrates easily with Firebase to handle user sign-in, cloud data storage, hosting, and more. In this experiment, we demonstrate Firebase initialization and authentication in a Flutter app.

ðŸªœ Steps to Perform the Experiment
Prerequisites

Install Android Studio and Flutter SDK.

Create a new Flutter project.

Set up a Firebase project on the Firebase Console.

Firebase Setup

Add the google-services.json file to your Android appâ€™s app directory.

In android/build.gradle, add:

gradle
Copy
Edit
classpath 'com.google.gms:google-services:4.3.10'
In android/app/build.gradle, apply the Google Services plugin and add dependencies:

gradle
Copy
Edit
apply plugin: 'com.google.gms.google-services'
implementation 'com.google.firebase:firebase-auth'
Update main.dart with Firebase Initialization

dart
Copy
Edit
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: CounterApp(),
    );
  }
}

class CounterApp extends StatefulWidget {
  @override
  _CounterAppState createState() => _CounterAppState();
}

class _CounterAppState extends State<CounterApp> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Counter App")),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text("You have pushed the button this many times:"),
            Text("$_counter", style: Theme.of(context).textTheme.headlineMedium),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}
Build & Deploy the App

Run flutter build web

Configure Firebase hosting: firebase init

Select Hosting, use an existing project, set build/web as the public directory.

Deploy: firebase deploy

âœ… Conclusion
In this experiment, we successfully integrated Firebase with a Flutter application for Email-Password authentication.
In this experiment, we learned how Firebase enhances app security and backend connectivity through easy authentication setup.

